
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var pascal = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "AND": 58,
  "ARRAY": 20,
  "ASSIGNMENT": 42,
  "CASE": 27,
  "CHARACTER_STRING": 13,
  "COLON": 26,
  "COMMA": 66,
  "CONST": 9,
  "DIGSEQ": 8,
  "DIV": 56,
  "DO": 40,
  "DOT": 3,
  "DOTDOT": 18,
  "DOWNTO": 51,
  "ELSE": 46,
  "END": 25,
  "EOF": 1,
  "EQUAL": 10,
  "EXTERNAL": 33,
  "FOR": 41,
  "FORWARD": 32,
  "FUNCTION": 35,
  "GE": 63,
  "GOTO": 47,
  "GT": 61,
  "IDENTIFIER": 65,
  "IF": 44,
  "IN": 64,
  "LABEL": 7,
  "LBRAC": 21,
  "LE": 62,
  "LPAREN": 5,
  "LT": 60,
  "MINUS": 15,
  "MOD": 57,
  "NIL": 52,
  "NOT": 12,
  "NOTEQUAL": 59,
  "OF": 23,
  "OR": 53,
  "OTHERWISE": 49,
  "PACKED": 19,
  "PBEGIN": 36,
  "PFILE": 29,
  "PLUS": 14,
  "PROCEDURE": 34,
  "PROGRAM": 4,
  "RBRAC": 22,
  "REALNUMBER": 16,
  "RECORD": 24,
  "REPEAT": 37,
  "RPAREN": 6,
  "SEMICOLON": 48,
  "SET": 28,
  "SLASH": 55,
  "STAR": 54,
  "STARSTAR": 11,
  "THEN": 45,
  "TO": 50,
  "TYPE": 17,
  "UNTIL": 38,
  "UPARROW": 30,
  "VAR": 31,
  "WHILE": 39,
  "WITH": 43,
  "actual_parameter": 168,
  "actual_parameter_list": 167,
  "addop": 195,
  "array_type": 98,
  "assignment_statement": 159,
  "base_type": 115,
  "block": 71,
  "boolean_expression": 180,
  "case_constant": 111,
  "case_constant_list": 110,
  "case_index": 171,
  "case_list_element": 173,
  "case_list_element_list": 172,
  "case_statement": 170,
  "cexponentiation": 83,
  "cexpression": 79,
  "cfactor": 82,
  "closed_for_statement": 154,
  "closed_if_statement": 158,
  "closed_statement": 147,
  "closed_while_statement": 152,
  "closed_with_statement": 156,
  "comma": 200,
  "component_type": 102,
  "compound_statement": 143,
  "constant": 85,
  "constant_definition": 78,
  "constant_definition_part": 76,
  "constant_list": 77,
  "control_variable": 175,
  "cprimary": 84,
  "csimple_expression": 80,
  "cterm": 81,
  "direction": 177,
  "directive": 127,
  "domain_type": 118,
  "enumerated_type": 94,
  "error": 2,
  "exponentiation": 185,
  "expression": 181,
  "factor": 184,
  "field_designator": 164,
  "file": 67,
  "file_type": 116,
  "final_value": 178,
  "formal_parameter_list": 128,
  "formal_parameter_section": 130,
  "formal_parameter_section_list": 129,
  "function_block": 141,
  "function_declaration": 137,
  "function_designator": 191,
  "function_heading": 138,
  "function_identification": 140,
  "functional_parameter_specification": 134,
  "goto_statement": 169,
  "identifier": 198,
  "identifier_list": 70,
  "index_expression": 163,
  "index_expression_list": 162,
  "index_list": 99,
  "index_type": 100,
  "indexed_variable": 161,
  "initial_value": 176,
  "label": 75,
  "label_declaration_part": 73,
  "label_list": 74,
  "member_designator": 194,
  "member_designator_list": 193,
  "module": 72,
  "mulop": 196,
  "new_ordinal_type": 93,
  "new_pointer_type": 117,
  "new_structured_type": 96,
  "new_type": 92,
  "non_labeled_closed_statement": 148,
  "non_labeled_open_statement": 149,
  "non_string": 87,
  "open_for_statement": 153,
  "open_if_statement": 157,
  "open_statement": 146,
  "open_while_statement": 151,
  "open_with_statement": 155,
  "ordinal_type": 101,
  "otherwisepart": 174,
  "params": 166,
  "primary": 186,
  "proc_or_func_declaration": 124,
  "proc_or_func_declaration_list": 123,
  "procedural_parameter_specification": 133,
  "procedure_and_function_declaration_part": 122,
  "procedure_block": 136,
  "procedure_declaration": 125,
  "procedure_heading": 126,
  "procedure_identification": 135,
  "procedure_statement": 165,
  "program": 68,
  "program_heading": 69,
  "record_section": 105,
  "record_section_list": 104,
  "record_type": 103,
  "record_variable_list": 179,
  "relop": 197,
  "repeat_statement": 150,
  "result_type": 139,
  "semicolon": 199,
  "set_constructor": 192,
  "set_type": 114,
  "sign": 86,
  "simple_expression": 182,
  "statement": 145,
  "statement_part": 142,
  "statement_sequence": 144,
  "structured_type": 97,
  "subrange_type": 95,
  "tag_field": 112,
  "tag_type": 113,
  "term": 183,
  "type_definition": 90,
  "type_definition_list": 89,
  "type_definition_part": 88,
  "type_denoter": 91,
  "unsigned_constant": 187,
  "unsigned_integer": 189,
  "unsigned_number": 188,
  "unsigned_real": 190,
  "value_parameter_specification": 131,
  "variable_access": 160,
  "variable_declaration": 121,
  "variable_declaration_list": 120,
  "variable_declaration_part": 119,
  "variable_parameter_specification": 132,
  "variant": 109,
  "variant_list": 108,
  "variant_part": 106,
  "variant_selector": 107
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "DOT",
  4: "PROGRAM",
  5: "LPAREN",
  6: "RPAREN",
  7: "LABEL",
  8: "DIGSEQ",
  9: "CONST",
  10: "EQUAL",
  11: "STARSTAR",
  12: "NOT",
  13: "CHARACTER_STRING",
  14: "PLUS",
  15: "MINUS",
  16: "REALNUMBER",
  17: "TYPE",
  18: "DOTDOT",
  19: "PACKED",
  20: "ARRAY",
  21: "LBRAC",
  22: "RBRAC",
  23: "OF",
  24: "RECORD",
  25: "END",
  26: "COLON",
  27: "CASE",
  28: "SET",
  29: "PFILE",
  30: "UPARROW",
  31: "VAR",
  32: "FORWARD",
  33: "EXTERNAL",
  34: "PROCEDURE",
  35: "FUNCTION",
  36: "PBEGIN",
  37: "REPEAT",
  38: "UNTIL",
  39: "WHILE",
  40: "DO",
  41: "FOR",
  42: "ASSIGNMENT",
  43: "WITH",
  44: "IF",
  45: "THEN",
  46: "ELSE",
  47: "GOTO",
  48: "SEMICOLON",
  49: "OTHERWISE",
  50: "TO",
  51: "DOWNTO",
  52: "NIL",
  53: "OR",
  54: "STAR",
  55: "SLASH",
  56: "DIV",
  57: "MOD",
  58: "AND",
  59: "NOTEQUAL",
  60: "LT",
  61: "GT",
  62: "LE",
  63: "GE",
  64: "IN",
  65: "IDENTIFIER",
  66: "COMMA"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  67,
  67,
  68,
  69,
  69,
  70,
  s,
  [70, 4, 1],
  73,
  74,
  74,
  75,
  76,
  76,
  77,
  77,
  78,
  79,
  79,
  80,
  80,
  81,
  81,
  82,
  82,
  83,
  83,
  s,
  [84, 4],
  s,
  [85, 3],
  86,
  86,
  s,
  [87, 3],
  88,
  88,
  89,
  89,
  90,
  91,
  91,
  s,
  [92, 3],
  93,
  s,
  [93, 4, 1],
  96,
  s,
  [97, 4],
  98,
  99,
  99,
  100,
  101,
  101,
  102,
  s,
  [103, 3],
  104,
  104,
  105,
  s,
  [106, 3],
  107,
  107,
  108,
  108,
  s,
  [109, 3],
  110,
  110,
  111,
  s,
  [111, 9, 1],
  119,
  120,
  120,
  121,
  122,
  122,
  123,
  123,
  124,
  124,
  125,
  125,
  126,
  126,
  127,
  127,
  128,
  129,
  129,
  s,
  [130, 4],
  s,
  [131, 7, 1],
  137,
  137,
  138,
  s,
  [138, 7, 1],
  144,
  145,
  145,
  146,
  146,
  147,
  147,
  s,
  [148, 11],
  s,
  [149, 4],
  s,
  [150, 8, 1],
  s,
  [157, 4, 1],
  s,
  [160, 3],
  161,
  162,
  s,
  [162, 4, 1],
  165,
  166,
  167,
  167,
  s,
  [168, 3],
  169,
  s,
  [170, 4],
  171,
  172,
  172,
  173,
  174,
  s,
  [174, 4, 1],
  177,
  178,
  179,
  179,
  180,
  181,
  181,
  182,
  182,
  183,
  183,
  184,
  184,
  185,
  185,
  s,
  [186, 6],
  s,
  [187, 3],
  188,
  s,
  [188, 5, 1],
  192,
  193,
  193,
  194,
  194,
  s,
  [195, 3],
  s,
  [196, 5],
  s,
  [197, 7],
  198,
  199,
  200
]),
  rule: u([
  1,
  1,
  4,
  2,
  5,
  3,
  1,
  6,
  4,
  3,
  0,
  3,
  1,
  1,
  2,
  0,
  2,
  1,
  4,
  1,
  3,
  1,
  3,
  1,
  3,
  2,
  1,
  c,
  [8, 5],
  2,
  1,
  c,
  [9, 3],
  s,
  [1, 4],
  c,
  [27, 6],
  s,
  [1, 6],
  3,
  c,
  [24, 4],
  s,
  [1, 3],
  6,
  c,
  [51, 3],
  c,
  [15, 4],
  5,
  c,
  [17, 3],
  3,
  5,
  4,
  c,
  [66, 3],
  3,
  1,
  5,
  s,
  [7, 4, -2],
  c,
  [8, 3],
  c,
  [68, 6],
  c,
  [86, 4],
  3,
  2,
  c,
  [91, 4],
  c,
  [53, 7],
  c,
  [6, 3],
  c,
  [51, 5],
  c,
  [75, 3],
  c,
  [30, 3],
  3,
  3,
  4,
  5,
  c,
  [22, 9],
  c,
  [62, 4],
  s,
  [1, 10],
  0,
  s,
  [1, 4],
  s,
  [4, 3],
  8,
  8,
  s,
  [4, 3],
  6,
  c,
  [106, 5],
  2,
  4,
  c,
  [87, 4],
  c,
  [55, 4],
  c,
  [116, 4],
  2,
  5,
  6,
  8,
  9,
  c,
  [164, 7],
  c,
  [83, 5],
  c,
  [67, 7],
  c,
  [186, 6],
  c,
  [13, 4],
  c,
  [186, 7],
  1,
  2,
  3,
  2,
  c,
  [92, 14],
  s,
  [1, 8]
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : file $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    file : program */
case 2:
    /*! Production::    file : module */

    this.$ = R ('file', yyvstack[yysp]);
    break;

case 3:
    /*! Production::    program : program_heading semicolon block DOT */

    this.$ = R ('program', yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], TT ('DOT', yyvstack[yysp]));
    break;

case 4:
    /*! Production::    program_heading : PROGRAM identifier */

    this.$ = R ('program_heading', TT ('PROGRAM', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 5:
    /*! Production::    program_heading : PROGRAM identifier LPAREN identifier_list RPAREN */

    this.$ = R ('program_heading', TT ('PROGRAM', yyvstack[yysp - 4]), yyvstack[yysp - 3], TT ('LPAREN', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('RPAREN', yyvstack[yysp]));
    break;

case 6:
    /*! Production::    identifier_list : identifier_list comma identifier */

    this.$ = RR ('identifier_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 7:
    /*! Production::    identifier_list : identifier */

    this.$ = RR ('identifier_list', yyvstack[yysp]);
    break;

case 8:
    /*! Production::    block : label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part */

    this.$ = R ('block', yyvstack[yysp - 5], yyvstack[yysp - 4], yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 9:
    /*! Production::    module : constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part */

    this.$ = R ('module', yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 10:
    /*! Production::    label_declaration_part : LABEL label_list semicolon */

    this.$ = R ('label_declaration_part', TT ('LABEL', yyvstack[yysp - 2]), yyvstack[yysp - 1]);
    break;

case 11:
    /*! Production::    label_declaration_part : %epsilon */

    this.$ = R ('label_declaration_part');
    break;

case 12:
    /*! Production::    label_list : label_list comma label */

    this.$ = RR ('label_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 13:
    /*! Production::    label_list : label */

    this.$ = RR ('label_list', yyvstack[yysp]);
    break;

case 14:
    /*! Production::    label : DIGSEQ */

    this.$ = RR ('label', T ('DIGSEQ', yyvstack[yysp]));
    break;

case 15:
    /*! Production::    constant_definition_part : CONST constant_list */

    this.$ = R ('constant_definition_part', TT ('CONST', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 16:
    /*! Production::    constant_definition_part : %epsilon */

    this.$ = R ('constant_definition_part');
    break;

case 17:
    /*! Production::    constant_list : constant_list constant_definition */

    this.$ = RR ('constant_list', yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 18:
    /*! Production::    constant_list : constant_definition */

    this.$ = RR ('constant_list', yyvstack[yysp]);
    break;

case 19:
    /*! Production::    constant_definition : identifier EQUAL cexpression semicolon */

    this.$ = R ('constant_definition', yyvstack[yysp - 3], TT ('EQUAL', yyvstack[yysp - 2]), yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 20:
    /*! Production::    cexpression : csimple_expression */

    this.$ = R ('cexpression', yyvstack[yysp]);
    break;

case 21:
    /*! Production::    cexpression : csimple_expression relop csimple_expression */

    this.$ = R ('cexpression', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 22:
    /*! Production::    csimple_expression : cterm */

    this.$ = R ('csimple_expression', yyvstack[yysp]);
    break;

case 23:
    /*! Production::    csimple_expression : csimple_expression addop cterm */

    this.$ = R ('csimple_expression', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 24:
    /*! Production::    cterm : cfactor */

    this.$ = R ('cterm', yyvstack[yysp]);
    break;

case 25:
    /*! Production::    cterm : cterm mulop cfactor */

    this.$ = R ('cterm', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 26:
    /*! Production::    cfactor : sign cfactor */

    this.$ = R ('cfactor', yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 27:
    /*! Production::    cfactor : cexponentiation */

    this.$ = R ('cfactor', yyvstack[yysp]);
    break;

case 28:
    /*! Production::    cexponentiation : cprimary */

    this.$ = R ('cexponentiation', yyvstack[yysp]);
    break;

case 29:
    /*! Production::    cexponentiation : cprimary STARSTAR cexponentiation */

    this.$ = R ('cexponentiation', yyvstack[yysp - 2], T ('STARSTAR', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 30:
    /*! Production::    cprimary : identifier */
case 32:
    /*! Production::    cprimary : unsigned_constant */

    this.$ = R ('cprimary', yyvstack[yysp]);
    break;

case 31:
    /*! Production::    cprimary : LPAREN cexpression RPAREN */

    this.$ = R ('cprimary', TT ('LPAREN', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('RPAREN', yyvstack[yysp]));
    break;

case 33:
    /*! Production::    cprimary : NOT cprimary */

    this.$ = R ('cprimary', T ('NOT', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 34:
    /*! Production::    constant : non_string */

    this.$ = R ('constant', yyvstack[yysp]);
    break;

case 35:
    /*! Production::    constant : sign non_string */

    this.$ = R ('constant', yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 36:
    /*! Production::    constant : CHARACTER_STRING */

    this.$ = R ('constant', T ('CHARACTER_STRING', yyvstack[yysp]));
    break;

case 37:
    /*! Production::    sign : PLUS */

    this.$ = R ('sign', T ('PLUS', yyvstack[yysp]));
    break;

case 38:
    /*! Production::    sign : MINUS */

    this.$ = R ('sign', T ('MINUS', yyvstack[yysp]));
    break;

case 39:
    /*! Production::    non_string : DIGSEQ */

    this.$ = R ('non_string', T ('DIGSEQ', yyvstack[yysp]));
    break;

case 40:
    /*! Production::    non_string : identifier */

    this.$ = R ('non_string', yyvstack[yysp]);
    break;

case 41:
    /*! Production::    non_string : REALNUMBER */

    this.$ = R ('non_string', T ('REALNUMBER', yyvstack[yysp]));
    break;

case 42:
    /*! Production::    type_definition_part : TYPE type_definition_list */

    this.$ = R ('type_definition_part', T ('TYPE', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 43:
    /*! Production::    type_definition_part : %epsilon */

    this.$ = R ('type_definition_part');
    break;

case 44:
    /*! Production::    type_definition_list : type_definition_list type_definition */

    this.$ = RR ('type_definition_list', yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 45:
    /*! Production::    type_definition_list : type_definition */

    this.$ = RR ('type_definition_list', yyvstack[yysp]);
    break;

case 46:
    /*! Production::    type_definition : identifier EQUAL type_denoter semicolon */

    this.$ = R ('type_definition', yyvstack[yysp - 3], TT ('EQUAL', yyvstack[yysp - 2]), yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 47:
    /*! Production::    type_denoter : identifier */
case 48:
    /*! Production::    type_denoter : new_type */

    this.$ = R ('type_denoter', yyvstack[yysp]);
    break;

case 49:
    /*! Production::    new_type : new_ordinal_type */
case 50:
    /*! Production::    new_type : new_structured_type */
case 51:
    /*! Production::    new_type : new_pointer_type */

    this.$ = R ('new_type', yyvstack[yysp]);
    break;

case 52:
    /*! Production::    new_ordinal_type : enumerated_type */
case 53:
    /*! Production::    new_ordinal_type : subrange_type */

    this.$ = R ('new_ordinal_type', yyvstack[yysp]);
    break;

case 54:
    /*! Production::    enumerated_type : LPAREN identifier_list RPAREN */

    this.$ = R ('enumerated_type', TT ('LPAREN', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('RPAREN', yyvstack[yysp]));
    break;

case 55:
    /*! Production::    subrange_type : constant DOTDOT constant */

    this.$ = R ('enumerated_type', yyvstack[yysp - 2], TT ('DOTDOT', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 56:
    /*! Production::    new_structured_type : structured_type */

    this.$ = R ('new_structured_type', yyvstack[yysp]);
    break;

case 57:
    /*! Production::    new_structured_type : PACKED structured_type */

    this.$ = R ('new_structured_type', T ('PACKED', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 58:
    /*! Production::    structured_type : array_type */
case 59:
    /*! Production::    structured_type : record_type */
case 60:
    /*! Production::    structured_type : set_type */
case 61:
    /*! Production::    structured_type : file_type */

    this.$ = R ('structured_type', yyvstack[yysp]);
    break;

case 62:
    /*! Production::    array_type : ARRAY LBRAC index_list RBRAC OF component_type */

    this.$ = R ('array_type', TT ('ARRAY', yyvstack[yysp - 5]), TT ('LBRAC', yyvstack[yysp - 4]), yyvstack[yysp - 3], TT ('RBRAC', yyvstack[yysp - 2]), TT ('OF', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 63:
    /*! Production::    index_list : index_list comma index_type */

    this.$ = RR ('index_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 64:
    /*! Production::    index_list : index_type */

    this.$ = RR ('index_list', yyvstack[yysp]);
    break;

case 65:
    /*! Production::    index_type : ordinal_type */

    this.$ = R ('index_type', yyvstack[yysp]);
    break;

case 66:
    /*! Production::    ordinal_type : new_ordinal_type */
case 67:
    /*! Production::    ordinal_type : identifier */

    this.$ = R ('ordinal_type', yyvstack[yysp]);
    break;

case 68:
    /*! Production::    component_type : type_denoter */

    this.$ = R ('component_type', yyvstack[yysp]);
    break;

case 69:
    /*! Production::    record_type : RECORD record_section_list END */
case 71:
    /*! Production::    record_type : RECORD variant_part END */

    this.$ = R ('record_type', TT ('RECORD', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('END', yyvstack[yysp]));
    break;

case 70:
    /*! Production::    record_type : RECORD record_section_list semicolon variant_part END */

    this.$ = R ('record_type', TT ('RECORD', yyvstack[yysp - 4]), yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], TT ('END', yyvstack[yysp]));
    break;

case 72:
    /*! Production::    record_section_list : record_section_list semicolon record_section */

    this.$ = RR ('record_section_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 73:
    /*! Production::    record_section_list : record_section */

    this.$ = RR ('record_section_list', yyvstack[yysp]);
    break;

case 74:
    /*! Production::    record_section : identifier_list COLON type_denoter */

    this.$ = R ('record_section', yyvstack[yysp - 2], TT ('COLON', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 75:
    /*! Production::    variant_part : CASE variant_selector OF variant_list semicolon */

    this.$ = R ('variant_part', TT ('CASE', yyvstack[yysp - 4]), yyvstack[yysp - 3], TT ('OF', yyvstack[yysp - 2]), yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 76:
    /*! Production::    variant_part : CASE variant_selector OF variant_list */

    this.$ = R ('variant_part', TT ('CASE', yyvstack[yysp - 3]), yyvstack[yysp - 2], TT ('OF', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 77:
    /*! Production::    variant_part : %epsilon */

    this.$ = R ('variant_part');
    break;

case 78:
    /*! Production::    variant_selector : tag_field COLON tag_type */

    this.$ = R ('variant_selector', yyvstack[yysp - 2], TT ('COLON', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 79:
    /*! Production::    variant_selector : tag_type */

    this.$ = R ('variant_selector', yyvstack[yysp]);
    break;

case 80:
    /*! Production::    variant_list : variant_list semicolon variant */

    this.$ = RR ('variant_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 81:
    /*! Production::    variant_list : variant */

    this.$ = RR ('variant_list', yyvstack[yysp]);
    break;

case 82:
    /*! Production::    variant : case_constant_list COLON LPAREN record_section_list RPAREN */
case 84:
    /*! Production::    variant : case_constant_list COLON LPAREN variant_part RPAREN */

    this.$ = R ('variant', yyvstack[yysp - 4], TT ('COLON', yyvstack[yysp - 3]), TT ('LPAREN', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('RPAREN', yyvstack[yysp]));
    break;

case 83:
    /*! Production::    variant : case_constant_list COLON LPAREN record_section_list semicolon variant_part RPAREN */

    this.$ = R ('variant', yyvstack[yysp - 6], TT ('COLON', yyvstack[yysp - 5]), TT ('LPAREN', yyvstack[yysp - 4]), yyvstack[yysp - 3], yyvstack[yysp - 2], yyvstack[yysp - 1], TT ('RPAREN', yyvstack[yysp]));
    break;

case 85:
    /*! Production::    case_constant_list : case_constant_list comma case_constant */

    this.$ = RR ('case_constant_list', yyvstack[yysp - 2], yyvstack[yysp - 1]);
    break;

case 86:
    /*! Production::    case_constant_list : case_constant */

    this.$ = RR ('case_constant_list', yyvstack[yysp]);
    break;

case 87:
    /*! Production::    case_constant : constant */

    this.$ = R ('case_constant', yyvstack[yysp]);
    break;

case 88:
    /*! Production::    case_constant : constant DOTDOT constant */

    this.$ = R ('case_constant', yyvstack[yysp - 2], TT ('DOTDOT', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 89:
    /*! Production::    tag_field : identifier */

    this.$ = R ('tag_field', yyvstack[yysp]);
    break;

case 90:
    /*! Production::    tag_type : identifier */

    this.$ = R ('tag_type', yyvstack[yysp]);
    break;

case 91:
    /*! Production::    set_type : SET OF base_type */

    this.$ = R ('set_type', TT ('SET', yyvstack[yysp - 2]), TT ('OF', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 92:
    /*! Production::    base_type : ordinal_type */

    this.$ = R ('base_type', yyvstack[yysp]);
    break;

case 93:
    /*! Production::    file_type : PFILE OF component_type */

    this.$ = R ('file_type', TT ('PFILE', yyvstack[yysp - 2]), TT ('OF', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 94:
    /*! Production::    new_pointer_type : UPARROW domain_type */

    this.$ = R ('new_pointer_type', TT ('UPARROW', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 95:
    /*! Production::    domain_type : identifier */

    this.$ = R ('domain_type', yyvstack[yysp]);
    break;

case 96:
    /*! Production::    variable_declaration_part : VAR variable_declaration_list semicolon */

    this.$ = R ('variable_declaration_part', TT ('VAR', yyvstack[yysp - 2]), yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 97:
    /*! Production::    variable_declaration_part : %epsilon */

    this.$ = R ('variable_declaration_part');
    break;

case 98:
    /*! Production::    variable_declaration_list : variable_declaration_list semicolon variable_declaration */

    this.$ = RR ('variable_declaration_list', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 99:
    /*! Production::    variable_declaration_list : variable_declaration */

    this.$ = RR ('variable_declaration_list', yyvstack[yysp]);
    break;

case 100:
    /*! Production::    variable_declaration : identifier_list COLON type_denoter */

    this.$ = RR ('variable_declaration', yyvstack[yysp - 2], TT ('COLON', yyvstack[yysp - 1]), yyvstack[yysp]);
    break;

case 101:
    /*! Production::    procedure_and_function_declaration_part : proc_or_func_declaration_list semicolon */
case 110:
    /*! Production::    procedure_heading : procedure_identification formal_parameter_list */
case 124:
    /*! Production::    procedure_identification : PROCEDURE identifier */
case 132:
    /*! Production::    function_identification : FUNCTION identifier */
case 173:
    /*! Production::    variable_access : variable_access UPARROW */
case 179:
    /*! Production::    procedure_statement : identifier params */
case 187:
    /*! Production::    goto_statement : GOTO label */
case 197:
    /*! Production::    otherwisepart : OTHERWISE COLON */
case 212:
    /*! Production::    factor : sign factor */
case 221:
    /*! Production::    primary : NOT primary */
case 229:
    /*! Production::    function_designator : identifier params */
case 231:
    /*! Production::    set_constructor : LBRAC RBRAC */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    break;

case 102:
    /*! Production::    procedure_and_function_declaration_part : %epsilon */
case 154:
    /*! Production::    non_labeled_closed_statement : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    break;

case 103:
    /*! Production::    proc_or_func_declaration_list : proc_or_func_declaration_list semicolon proc_or_func_declaration */
case 107:
    /*! Production::    procedure_declaration : procedure_heading semicolon directive */
case 108:
    /*! Production::    procedure_declaration : procedure_heading semicolon procedure_block */
case 113:
    /*! Production::    formal_parameter_list : LPAREN formal_parameter_section_list RPAREN */
case 114:
    /*! Production::    formal_parameter_section_list : formal_parameter_section_list semicolon formal_parameter_section */
case 120:
    /*! Production::    value_parameter_specification : identifier_list COLON identifier */
case 126:
    /*! Production::    function_declaration : function_heading semicolon directive */
case 127:
    /*! Production::    function_declaration : function_identification semicolon function_block */
case 128:
    /*! Production::    function_declaration : function_heading semicolon function_block */
case 140:
    /*! Production::    open_statement : label COLON non_labeled_open_statement */
case 142:
    /*! Production::    closed_statement : label COLON non_labeled_closed_statement */
case 169:
    /*! Production::    assignment_statement : variable_access ASSIGNMENT expression */
case 175:
    /*! Production::    index_expression_list : index_expression_list comma index_expression */
case 178:
    /*! Production::    field_designator : variable_access DOT identifier */
case 181:
    /*! Production::    params : LPAREN actual_parameter_list RPAREN */
case 182:
    /*! Production::    actual_parameter_list : actual_parameter_list comma actual_parameter */
case 185:
    /*! Production::    actual_parameter : expression COLON expression */
case 193:
    /*! Production::    case_list_element_list : case_list_element_list semicolon case_list_element */
case 195:
    /*! Production::    case_list_element : case_constant_list COLON statement */
case 203:
    /*! Production::    record_variable_list : record_variable_list comma variable_access */
case 207:
    /*! Production::    expression : simple_expression relop simple_expression */
case 209:
    /*! Production::    simple_expression : simple_expression addop term */
case 211:
    /*! Production::    term : term mulop factor */
case 215:
    /*! Production::    exponentiation : primary STARSTAR exponentiation */
case 220:
    /*! Production::    primary : LPAREN expression RPAREN */
case 230:
    /*! Production::    set_constructor : LBRAC member_designator_list RBRAC */
case 232:
    /*! Production::    member_designator_list : member_designator_list comma member_designator */
case 234:
    /*! Production::    member_designator : member_designator DOTDOT expression */

    // default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 2];
    // END of default action (generated by JISON mode classic/merge :: 3,VT,VA,-,-,-,-,-,-)
    break;

case 104:
    /*! Production::    proc_or_func_declaration_list : proc_or_func_declaration */
case 105:
    /*! Production::    proc_or_func_declaration : procedure_declaration */
case 106:
    /*! Production::    proc_or_func_declaration : function_declaration */
case 109:
    /*! Production::    procedure_heading : procedure_identification */
case 111:
    /*! Production::    directive : FORWARD */
case 112:
    /*! Production::    directive : EXTERNAL */
case 115:
    /*! Production::    formal_parameter_section_list : formal_parameter_section */
case 116:
    /*! Production::    formal_parameter_section : value_parameter_specification */
case 117:
    /*! Production::    formal_parameter_section : variable_parameter_specification */
case 118:
    /*! Production::    formal_parameter_section : procedural_parameter_specification */
case 119:
    /*! Production::    formal_parameter_section : functional_parameter_specification */
case 122:
    /*! Production::    procedural_parameter_specification : procedure_heading */
case 123:
    /*! Production::    functional_parameter_specification : function_heading */
case 125:
    /*! Production::    procedure_block : block */
case 131:
    /*! Production::    result_type : identifier */
case 133:
    /*! Production::    function_block : block */
case 141:
    /*! Production::    open_statement : non_labeled_open_statement */
case 143:
    /*! Production::    closed_statement : non_labeled_closed_statement */
case 144:
    /*! Production::    non_labeled_closed_statement : assignment_statement */
case 145:
    /*! Production::    non_labeled_closed_statement : procedure_statement */
case 146:
    /*! Production::    non_labeled_closed_statement : goto_statement */
case 147:
    /*! Production::    non_labeled_closed_statement : compound_statement */
case 148:
    /*! Production::    non_labeled_closed_statement : case_statement */
case 149:
    /*! Production::    non_labeled_closed_statement : repeat_statement */
case 150:
    /*! Production::    non_labeled_closed_statement : closed_with_statement */
case 151:
    /*! Production::    non_labeled_closed_statement : closed_if_statement */
case 152:
    /*! Production::    non_labeled_closed_statement : closed_while_statement */
case 153:
    /*! Production::    non_labeled_closed_statement : closed_for_statement */
case 155:
    /*! Production::    non_labeled_open_statement : open_with_statement */
case 156:
    /*! Production::    non_labeled_open_statement : open_if_statement */
case 157:
    /*! Production::    non_labeled_open_statement : open_while_statement */
case 158:
    /*! Production::    non_labeled_open_statement : open_for_statement */
case 170:
    /*! Production::    variable_access : identifier */
case 171:
    /*! Production::    variable_access : indexed_variable */
case 172:
    /*! Production::    variable_access : field_designator */
case 176:
    /*! Production::    index_expression_list : index_expression */
case 177:
    /*! Production::    index_expression : expression */
case 180:
    /*! Production::    procedure_statement : identifier */
case 183:
    /*! Production::    actual_parameter_list : actual_parameter */
case 184:
    /*! Production::    actual_parameter : expression */
case 192:
    /*! Production::    case_index : expression */
case 194:
    /*! Production::    case_list_element_list : case_list_element */
case 196:
    /*! Production::    otherwisepart : OTHERWISE */
case 198:
    /*! Production::    control_variable : identifier */
case 199:
    /*! Production::    initial_value : expression */
case 200:
    /*! Production::    direction : TO */
case 201:
    /*! Production::    direction : DOWNTO */
case 202:
    /*! Production::    final_value : expression */
case 204:
    /*! Production::    record_variable_list : variable_access */
case 205:
    /*! Production::    boolean_expression : expression */
case 206:
    /*! Production::    expression : simple_expression */
case 208:
    /*! Production::    simple_expression : term */
case 210:
    /*! Production::    term : factor */
case 213:
    /*! Production::    factor : exponentiation */
case 214:
    /*! Production::    exponentiation : primary */
case 216:
    /*! Production::    primary : variable_access */
case 217:
    /*! Production::    primary : unsigned_constant */
case 218:
    /*! Production::    primary : function_designator */
case 219:
    /*! Production::    primary : set_constructor */
case 222:
    /*! Production::    unsigned_constant : unsigned_number */
case 223:
    /*! Production::    unsigned_constant : CHARACTER_STRING */
case 224:
    /*! Production::    unsigned_constant : NIL */
case 225:
    /*! Production::    unsigned_number : unsigned_integer */
case 226:
    /*! Production::    unsigned_number : unsigned_real */
case 227:
    /*! Production::    unsigned_integer : DIGSEQ */
case 228:
    /*! Production::    unsigned_real : REALNUMBER */
case 233:
    /*! Production::    member_designator_list : member_designator */
case 235:
    /*! Production::    member_designator : expression */
case 236:
    /*! Production::    addop : PLUS */
case 237:
    /*! Production::    addop : MINUS */
case 238:
    /*! Production::    addop : OR */
case 239:
    /*! Production::    mulop : STAR */
case 240:
    /*! Production::    mulop : SLASH */
case 241:
    /*! Production::    mulop : DIV */
case 242:
    /*! Production::    mulop : MOD */
case 243:
    /*! Production::    mulop : AND */
case 244:
    /*! Production::    relop : EQUAL */
case 245:
    /*! Production::    relop : NOTEQUAL */
case 246:
    /*! Production::    relop : LT */
case 247:
    /*! Production::    relop : GT */
case 248:
    /*! Production::    relop : LE */
case 249:
    /*! Production::    relop : GE */
case 250:
    /*! Production::    relop : IN */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 121:
    /*! Production::    variable_parameter_specification : VAR identifier_list COLON identifier */
case 129:
    /*! Production::    function_heading : FUNCTION identifier COLON result_type */
case 159:
    /*! Production::    repeat_statement : REPEAT statement_sequence UNTIL boolean_expression */
case 160:
    /*! Production::    open_while_statement : WHILE boolean_expression DO open_statement */
case 161:
    /*! Production::    closed_while_statement : WHILE boolean_expression DO closed_statement */
case 164:
    /*! Production::    open_with_statement : WITH record_variable_list DO open_statement */
case 165:
    /*! Production::    closed_with_statement : WITH record_variable_list DO closed_statement */
case 166:
    /*! Production::    open_if_statement : IF boolean_expression THEN statement */
case 174:
    /*! Production::    indexed_variable : variable_access LBRAC index_expression_list RBRAC */

    // default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 3];
    // END of default action (generated by JISON mode classic/merge :: 4,VT,VA,-,-,-,-,-,-)
    break;

case 130:
    /*! Production::    function_heading : FUNCTION identifier formal_parameter_list COLON result_type */
case 186:
    /*! Production::    actual_parameter : expression COLON expression COLON expression */
case 188:
    /*! Production::    case_statement : CASE case_index OF case_list_element_list END */

    // default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 4];
    // END of default action (generated by JISON mode classic/merge :: 5,VT,VA,-,-,-,-,-,-)
    break;

case 134:
    /*! Production::    statement_part : compound_statement */

    this.$ = R ('statement_part', yyvstack[yysp]);
    break;

case 135:
    /*! Production::    compound_statement : PBEGIN statement_sequence END */

    this.$ = TR ('compound_statement', TT ('PBEGIN', yyvstack[yysp - 2]), yyvstack[yysp - 1], TT ('PEND', yyvstack[yysp]));
    break;

case 136:
    /*! Production::    statement_sequence : statement_sequence semicolon statement */

    this.$ = RR ('statement_sequence', yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 137:
    /*! Production::    statement_sequence : statement */

    this.$ = RR ('statement_sequence', yyvstack[yysp]);
    break;

case 138:
    /*! Production::    statement : open_statement */
case 139:
    /*! Production::    statement : closed_statement */

    this.$ = R ('statement', yyvstack[yysp]);
    break;

case 162:
    /*! Production::    open_for_statement : FOR control_variable ASSIGNMENT initial_value direction final_value DO open_statement */
case 163:
    /*! Production::    closed_for_statement : FOR control_variable ASSIGNMENT initial_value direction final_value DO closed_statement */
case 190:
    /*! Production::    case_statement : CASE case_index OF case_list_element_list semicolon otherwisepart statement END */

    // default action (generated by JISON mode classic/merge :: 8,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 7];
    // END of default action (generated by JISON mode classic/merge :: 8,VT,VA,-,-,-,-,-,-)
    break;

case 167:
    /*! Production::    open_if_statement : IF boolean_expression THEN closed_statement ELSE open_statement */
case 168:
    /*! Production::    closed_if_statement : IF boolean_expression THEN closed_statement ELSE closed_statement */
case 189:
    /*! Production::    case_statement : CASE case_index OF case_list_element_list SEMICOLON END */

    // default action (generated by JISON mode classic/merge :: 6,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 5];
    // END of default action (generated by JISON mode classic/merge :: 6,VT,VA,-,-,-,-,-,-)
    break;

case 191:
    /*! Production::    case_statement : CASE case_index OF case_list_element_list semicolon otherwisepart statement SEMICOLON END */

    // default action (generated by JISON mode classic/merge :: 9,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 8];
    // END of default action (generated by JISON mode classic/merge :: 9,VT,VA,-,-,-,-,-,-)
    break;

case 251:
    /*! Production::    identifier : IDENTIFIER */

    this.$ = TR ('identifier', T ('IDENTIFIER', yyvstack[yysp]));
    break;

case 252:
    /*! Production::    semicolon : SEMICOLON */

    this.$ = TR ('semicolon', T ('SEMICOLON', yyvstack[yysp]));
    break;

case 253:
    /*! Production::    comma : COMMA */

    this.$ = TR ('comma', T ('COMMA', yyvstack[yysp]));
    break;

}
},
table: bt({
  len: u([
  12,
  1,
  0,
  0,
  2,
  6,
  2,
  4,
  9,
  0,
  5,
  4,
  2,
  0,
  9,
  0,
  1,
  1,
  7,
  3,
  12,
  5,
  8,
  0,
  1,
  3,
  0,
  21,
  0,
  6,
  4,
  s,
  [0, 3],
  2,
  c,
  [4, 4],
  2,
  2,
  4,
  s,
  [2, 3],
  0,
  3,
  0,
  0,
  29,
  3,
  2,
  14,
  18,
  0,
  18,
  s,
  [0, 3],
  18,
  c,
  [34, 3],
  13,
  s,
  [0, 7],
  5,
  c,
  [39, 3],
  11,
  13,
  13,
  10,
  0,
  15,
  4,
  0,
  8,
  29,
  c,
  [46, 3],
  s,
  [0, 7],
  9,
  3,
  3,
  c,
  [97, 3],
  c,
  [33, 5],
  1,
  8,
  1,
  c,
  [11, 5],
  20,
  19,
  s,
  [0, 10],
  c,
  [71, 4],
  s,
  [0, 3],
  14,
  1,
  0,
  12,
  s,
  [0, 11],
  c,
  [102, 3],
  c,
  [6, 4],
  c,
  [7, 3],
  2,
  c,
  [62, 7],
  c,
  [14, 3],
  10,
  0,
  0,
  17,
  c,
  [14, 3],
  5,
  3,
  16,
  30,
  6,
  c,
  [55, 4],
  3,
  0,
  14,
  2,
  c,
  [35, 4],
  c,
  [3, 6],
  0,
  6,
  0,
  7,
  c,
  [188, 3],
  0,
  2,
  29,
  s,
  [0, 6],
  37,
  c,
  [184, 4],
  1,
  16,
  1,
  0,
  14,
  3,
  c,
  [31, 5],
  c,
  [71, 8],
  s,
  [0, 9],
  6,
  28,
  28,
  3,
  4,
  10,
  2,
  28,
  c,
  [41, 3],
  0,
  30,
  0,
  0,
  4,
  c,
  [38, 3],
  c,
  [40, 4],
  37,
  33,
  3,
  c,
  [170, 3],
  0,
  26,
  30,
  0,
  24,
  0,
  30,
  33,
  s,
  [0, 3],
  27,
  19,
  35,
  30,
  c,
  [88, 3],
  27,
  0,
  29,
  2,
  0,
  29,
  c,
  [26, 3],
  3,
  0,
  15,
  1,
  11,
  c,
  [140, 3],
  0,
  37,
  5,
  38,
  26,
  25,
  24,
  0,
  20,
  c,
  [90, 3],
  c,
  [59, 4],
  37,
  28,
  c,
  [64, 5],
  c,
  [11, 3],
  14,
  28,
  0,
  8,
  c,
  [242, 6],
  4,
  18,
  c,
  [90, 3],
  0,
  0,
  28,
  27,
  c,
  [163, 5],
  28,
  c,
  [9, 3],
  c,
  [42, 4],
  3,
  1,
  37,
  3,
  c,
  [13, 3],
  c,
  [45, 5],
  8,
  15,
  36,
  c,
  [184, 3],
  c,
  [159, 4],
  27,
  0,
  36,
  c,
  [333, 3],
  1,
  37,
  c,
  [367, 5],
  c,
  [17, 4]
]),
  symbol: u([
  1,
  4,
  9,
  17,
  31,
  34,
  35,
  67,
  68,
  69,
  72,
  76,
  1,
  48,
  199,
  1,
  c,
  [13, 4],
  88,
  65,
  198,
  65,
  77,
  78,
  198,
  7,
  c,
  [26, 5],
  36,
  71,
  73,
  1,
  c,
  [7, 3],
  119,
  65,
  89,
  90,
  198,
  5,
  48,
  c,
  [32, 5],
  36,
  65,
  78,
  198,
  10,
  3,
  c,
  [30, 6],
  76,
  8,
  74,
  75,
  1,
  34,
  35,
  s,
  [122, 5, 1],
  135,
  137,
  138,
  140,
  65,
  70,
  120,
  121,
  198,
  c,
  [49, 4],
  36,
  65,
  90,
  198,
  10,
  65,
  70,
  198,
  5,
  8,
  s,
  [12, 5, 1],
  52,
  65,
  s,
  [79, 6, 1],
  86,
  s,
  [187, 4, 1],
  198,
  c,
  [59, 5],
  88,
  48,
  66,
  199,
  200,
  48,
  199,
  48,
  199,
  c,
  [4, 4],
  5,
  6,
  48,
  128,
  c,
  [119, 3],
  198,
  48,
  199,
  26,
  66,
  200,
  5,
  8,
  c,
  [51, 4],
  19,
  20,
  24,
  28,
  29,
  30,
  65,
  85,
  86,
  87,
  s,
  [91, 8, 1],
  103,
  114,
  116,
  117,
  198,
  6,
  66,
  c,
  [53, 3],
  6,
  10,
  14,
  15,
  48,
  53,
  s,
  [59, 6, 1],
  195,
  197,
  c,
  [14, 6],
  s,
  [54, 11, 1],
  196,
  c,
  [118, 9],
  c,
  [115, 9],
  6,
  10,
  11,
  c,
  [37, 15],
  c,
  [154, 21],
  c,
  [21, 4],
  c,
  [19, 3],
  84,
  c,
  [13, 5],
  c,
  [166, 4],
  119,
  8,
  c,
  [224, 4],
  36,
  c,
  [223, 7],
  c,
  [276, 4],
  s,
  [32, 5, 1],
  71,
  73,
  127,
  136,
  c,
  [13, 12],
  141,
  c,
  [302, 9],
  141,
  c,
  [7, 3],
  65,
  70,
  126,
  s,
  [129, 7, 1],
  138,
  198,
  5,
  26,
  48,
  128,
  c,
  [66, 4],
  65,
  70,
  121,
  c,
  [94, 3],
  c,
  [217, 27],
  c,
  [253, 4],
  6,
  18,
  25,
  48,
  c,
  [30, 4],
  c,
  [19, 5],
  65,
  118,
  198,
  c,
  [321, 3],
  18,
  8,
  16,
  65,
  87,
  198,
  21,
  25,
  27,
  65,
  70,
  104,
  105,
  106,
  198,
  23,
  23,
  c,
  [184, 9],
  c,
  [183, 15],
  c,
  [20, 5],
  c,
  [19, 19],
  c,
  [220, 16],
  83,
  c,
  [221, 6],
  6,
  c,
  [148, 3],
  c,
  [439, 9],
  6,
  c,
  [376, 5],
  c,
  [110, 3],
  c,
  [388, 3],
  139,
  198,
  26,
  c,
  [356, 3],
  c,
  [170, 5],
  c,
  [164, 4],
  c,
  [181, 7],
  c,
  [11, 4],
  c,
  [173, 3],
  99,
  100,
  101,
  198,
  25,
  48,
  199,
  25,
  65,
  107,
  112,
  113,
  198,
  c,
  [427, 9],
  c,
  [29, 7],
  101,
  115,
  c,
  [226, 25],
  102,
  c,
  [444, 6],
  c,
  [387, 4],
  195,
  c,
  [431, 18],
  36,
  142,
  143,
  c,
  [310, 6],
  c,
  [309, 8],
  65,
  c,
  [92, 5],
  26,
  128,
  c,
  [141, 3],
  22,
  66,
  200,
  6,
  18,
  22,
  25,
  48,
  66,
  c,
  [258, 4],
  c,
  [257, 4],
  26,
  23,
  26,
  c,
  [328, 29],
  8,
  25,
  27,
  36,
  s,
  [37, 4, 2],
  44,
  47,
  48,
  65,
  75,
  s,
  [143, 19, 1],
  164,
  165,
  169,
  170,
  c,
  [97, 3],
  c,
  [328, 3],
  c,
  [187, 11],
  c,
  [215, 4],
  c,
  [16, 9],
  s,
  [108, 4, 1],
  198,
  65,
  113,
  c,
  [233, 4],
  26,
  65,
  c,
  [49, 3],
  179,
  c,
  [333, 8],
  21,
  52,
  65,
  86,
  c,
  [16, 3],
  s,
  [180, 13, 1],
  c,
  [28, 29],
  65,
  175,
  198,
  3,
  21,
  30,
  42,
  3,
  5,
  21,
  25,
  30,
  38,
  42,
  46,
  48,
  166,
  8,
  75,
  c,
  [47, 14],
  171,
  c,
  [47, 13],
  8,
  c,
  [186, 3],
  38,
  c,
  [187, 32],
  c,
  [355, 31],
  c,
  [181, 4],
  66,
  200,
  18,
  26,
  66,
  c,
  [264, 5],
  c,
  [78, 10],
  c,
  [77, 22],
  c,
  [36, 9],
  46,
  c,
  [37, 3],
  143,
  c,
  [33, 19],
  40,
  66,
  200,
  c,
  [194, 3],
  40,
  66,
  45,
  c,
  [438, 4],
  18,
  22,
  23,
  25,
  26,
  38,
  40,
  45,
  46,
  48,
  50,
  51,
  c,
  [894, 7],
  66,
  c,
  [895, 6],
  c,
  [26, 13],
  c,
  [475, 11],
  66,
  c,
  [907, 8],
  c,
  [240, 7],
  c,
  [236, 10],
  c,
  [913, 5],
  c,
  [55, 25],
  3,
  c,
  [31, 6],
  21,
  c,
  [32, 4],
  30,
  c,
  [33, 20],
  c,
  [87, 14],
  c,
  [401, 17],
  c,
  [25, 4],
  c,
  [24, 3],
  c,
  [19, 8],
  3,
  5,
  c,
  [80, 32],
  166,
  c,
  [81, 8],
  22,
  c,
  [82, 18],
  193,
  194,
  198,
  40,
  42,
  c,
  [113, 31],
  c,
  [27, 9],
  162,
  163,
  c,
  [29, 14],
  65,
  c,
  [545, 15],
  167,
  168,
  c,
  [31, 13],
  23,
  38,
  c,
  [1014, 3],
  c,
  [466, 5],
  25,
  c,
  [461, 4],
  c,
  [634, 4],
  c,
  [665, 10],
  111,
  198,
  c,
  [903, 10],
  c,
  [463, 10],
  c,
  [427, 4],
  75,
  143,
  c,
  [727, 22],
  c,
  [8, 3],
  c,
  [42, 17],
  c,
  [583, 24],
  c,
  [150, 12],
  c,
  [721, 26],
  c,
  [25, 25],
  c,
  [369, 21],
  c,
  [479, 10],
  c,
  [952, 3],
  18,
  22,
  c,
  [645, 11],
  c,
  [182, 27],
  c,
  [88, 14],
  176,
  c,
  [288, 13],
  c,
  [1023, 4],
  c,
  [3, 3],
  c,
  [719, 3],
  c,
  [266, 8],
  110,
  111,
  172,
  173,
  c,
  [885, 29],
  6,
  c,
  [1323, 7],
  c,
  [696, 5],
  25,
  38,
  46,
  48,
  c,
  [1143, 3],
  c,
  [617, 13],
  66,
  c,
  [1155, 5],
  c,
  [691, 40],
  c,
  [92, 12],
  194,
  c,
  [121, 15],
  c,
  [120, 13],
  50,
  51,
  177,
  c,
  [30, 13],
  c,
  [521, 15],
  c,
  [58, 14],
  c,
  [518, 14],
  c,
  [86, 27],
  c,
  [976, 6],
  c,
  [1441, 3],
  6,
  c,
  [332, 37],
  c,
  [372, 3],
  c,
  [77, 14],
  178,
  c,
  [284, 14],
  c,
  [329, 7],
  25,
  49,
  65,
  c,
  [8, 5],
  49,
  c,
  [338, 6],
  173,
  174,
  c,
  [1335, 15],
  c,
  [564, 22],
  c,
  [346, 4],
  c,
  [345, 3],
  40,
  c,
  [175, 27],
  c,
  [71, 36],
  8,
  25,
  26,
  c,
  [37, 10],
  c,
  [215, 38],
  25,
  48,
  25
]),
  type: u([
  s,
  [2, 7],
  s,
  [0, 5],
  1,
  2,
  0,
  c,
  [13, 6],
  c,
  [8, 3],
  s,
  [0, 3],
  c,
  [27, 9],
  c,
  [20, 7],
  c,
  [18, 9],
  c,
  [20, 8],
  c,
  [24, 8],
  c,
  [64, 8],
  s,
  [0, 4],
  c,
  [10, 5],
  c,
  [37, 10],
  c,
  [52, 13],
  s,
  [0, 10],
  c,
  [59, 7],
  c,
  [31, 4],
  c,
  [109, 5],
  c,
  [121, 5],
  c,
  [10, 9],
  c,
  [52, 10],
  c,
  [56, 16],
  c,
  [60, 6],
  c,
  [47, 6],
  c,
  [141, 19],
  c,
  [19, 10],
  c,
  [62, 18],
  s,
  [2, 27],
  c,
  [154, 17],
  c,
  [19, 8],
  c,
  [269, 8],
  c,
  [36, 10],
  c,
  [52, 13],
  c,
  [13, 20],
  c,
  [54, 8],
  c,
  [82, 13],
  c,
  [240, 7],
  c,
  [133, 15],
  c,
  [217, 17],
  c,
  [216, 11],
  c,
  [332, 8],
  c,
  [382, 8],
  c,
  [85, 10],
  c,
  [65, 22],
  c,
  [20, 19],
  c,
  [259, 25],
  c,
  [14, 11],
  c,
  [341, 13],
  c,
  [460, 6],
  c,
  [465, 8],
  c,
  [218, 20],
  c,
  [45, 13],
  c,
  [9, 8],
  c,
  [359, 27],
  s,
  [0, 17],
  c,
  [413, 15],
  c,
  [581, 15],
  c,
  [99, 12],
  c,
  [146, 11],
  c,
  [462, 15],
  c,
  [447, 29],
  c,
  [33, 16],
  s,
  [0, 25],
  c,
  [363, 15],
  c,
  [232, 19],
  c,
  [123, 8],
  c,
  [84, 15],
  c,
  [75, 19],
  c,
  [28, 28],
  c,
  [274, 16],
  c,
  [254, 12],
  c,
  [75, 28],
  c,
  [187, 28],
  c,
  [355, 32],
  c,
  [835, 17],
  c,
  [78, 27],
  c,
  [37, 33],
  c,
  [432, 20],
  c,
  [53, 15],
  c,
  [31, 30],
  c,
  [95, 24],
  s,
  [2, 73],
  c,
  [212, 25],
  c,
  [109, 45],
  c,
  [857, 23],
  c,
  [410, 37],
  c,
  [58, 30],
  c,
  [31, 31],
  c,
  [123, 11],
  c,
  [649, 19],
  c,
  [760, 24],
  c,
  [727, 25],
  c,
  [42, 40],
  c,
  [150, 27],
  c,
  [26, 25],
  c,
  [459, 32],
  c,
  [216, 24],
  c,
  [182, 33],
  c,
  [787, 29],
  c,
  [1026, 17],
  c,
  [913, 35],
  c,
  [501, 31],
  c,
  [691, 55],
  c,
  [121, 31],
  c,
  [58, 58],
  c,
  [86, 33],
  c,
  [903, 19],
  c,
  [977, 54],
  c,
  [831, 26],
  c,
  [564, 39],
  c,
  [1668, 26],
  c,
  [71, 45],
  c,
  [974, 42],
  c,
  [51, 9]
]),
  state: u([
  1,
  2,
  4,
  3,
  5,
  s,
  [8, 4, 2],
  s,
  [15, 4, 1],
  20,
  22,
  23,
  24,
  26,
  16,
  29,
  30,
  31,
  s,
  [33, 4, 1],
  38,
  41,
  37,
  39,
  40,
  46,
  44,
  45,
  47,
  48,
  24,
  50,
  47,
  s,
  [51, 4, 1],
  56,
  59,
  55,
  62,
  64,
  67,
  68,
  60,
  71,
  72,
  73,
  s,
  [75, 5, 1],
  81,
  82,
  83,
  85,
  98,
  104,
  103,
  86,
  88,
  89,
  92,
  93,
  90,
  94,
  s,
  [99, 4, 1],
  91,
  87,
  85,
  113,
  115,
  114,
  126,
  132,
  c,
  [42, 8],
  134,
  c,
  [54, 11],
  135,
  c,
  [6, 5],
  136,
  137,
  138,
  c,
  [89, 6],
  143,
  18,
  139,
  140,
  146,
  18,
  144,
  145,
  146,
  18,
  147,
  154,
  156,
  s,
  [148, 6, 1],
  41,
  157,
  47,
  160,
  46,
  161,
  47,
  c,
  [83, 3],
  162,
  c,
  [83, 12],
  163,
  164,
  165,
  c,
  [9, 4],
  166,
  167,
  168,
  47,
  170,
  171,
  177,
  173,
  175,
  174,
  47,
  180,
  c,
  [86, 10],
  181,
  c,
  [10, 9],
  182,
  c,
  [9, 8],
  183,
  59,
  c,
  [7, 5],
  185,
  c,
  [195, 8],
  187,
  85,
  189,
  47,
  190,
  191,
  192,
  85,
  195,
  104,
  103,
  171,
  c,
  [92, 3],
  199,
  92,
  93,
  196,
  197,
  s,
  [198, 4, 2],
  205,
  206,
  207,
  c,
  [191, 4],
  c,
  [16, 3],
  210,
  209,
  200,
  c,
  [9, 3],
  212,
  c,
  [117, 7],
  211,
  c,
  [118, 5],
  115,
  126,
  213,
  214,
  154,
  156,
  216,
  c,
  [152, 7],
  217,
  85,
  160,
  219,
  192,
  221,
  177,
  223,
  222,
  c,
  [158, 4],
  226,
  c,
  [158, 12],
  231,
  241,
  s,
  [227, 4, 1],
  233,
  232,
  243,
  236,
  246,
  237,
  247,
  234,
  244,
  235,
  245,
  238,
  252,
  257,
  258,
  239,
  240,
  242,
  253,
  259,
  c,
  [92, 6],
  261,
  198,
  200,
  267,
  104,
  103,
  s,
  [263, 4, 1],
  171,
  268,
  269,
  271,
  274,
  257,
  258,
  273,
  275,
  281,
  284,
  257,
  258,
  s,
  [276, 5, 1],
  282,
  283,
  285,
  c,
  [170, 3],
  286,
  287,
  290,
  c,
  [18, 4],
  292,
  c,
  [18, 13],
  293,
  294,
  299,
  301,
  c,
  [22, 4],
  302,
  303,
  c,
  [22, 12],
  231,
  241,
  304,
  c,
  [109, 22],
  c,
  [191, 11],
  305,
  c,
  [151, 5],
  306,
  308,
  231,
  241,
  310,
  c,
  [43, 21],
  241,
  312,
  311,
  c,
  [20, 17],
  314,
  317,
  316,
  318,
  c,
  [110, 4],
  319,
  c,
  [146, 13],
  321,
  c,
  [123, 12],
  c,
  [16, 3],
  322,
  c,
  [11, 7],
  323,
  c,
  [29, 4],
  327,
  c,
  [29, 11],
  324,
  326,
  c,
  [48, 5],
  330,
  c,
  [211, 15],
  331,
  332,
  258,
  333,
  c,
  [19, 12],
  334,
  c,
  [37, 4],
  335,
  336,
  337,
  c,
  [20, 12],
  271,
  c,
  [285, 3],
  340,
  c,
  [284, 3],
  c,
  [7, 3],
  342,
  171,
  343,
  c,
  [418, 3],
  231,
  241,
  344,
  345,
  c,
  [182, 19],
  346,
  257,
  258,
  275,
  231,
  241,
  347,
  229,
  348,
  c,
  [28, 19],
  c,
  [87, 4],
  349,
  c,
  [334, 15],
  350,
  c,
  [15, 14],
  351,
  c,
  [200, 12],
  352,
  c,
  [12, 8],
  355,
  231,
  241,
  357,
  358,
  c,
  [81, 23],
  359,
  360,
  c,
  [167, 12],
  362,
  364,
  c,
  [161, 3],
  368,
  266,
  366,
  367,
  171,
  c,
  [28, 4],
  369,
  c,
  [427, 13],
  177,
  370,
  175,
  371,
  47,
  317,
  c,
  [320, 5],
  c,
  [277, 12],
  373,
  c,
  [121, 5],
  374,
  c,
  [42, 12],
  375,
  c,
  [18, 3],
  378,
  c,
  [276, 14],
  c,
  [36, 4],
  379,
  c,
  [274, 13],
  c,
  [18, 4],
  380,
  c,
  [17, 12],
  383,
  308,
  386,
  231,
  241,
  388,
  389,
  c,
  [168, 23],
  390,
  391,
  c,
  [44, 12],
  c,
  [166, 5],
  395,
  394,
  c,
  [326, 3],
  397,
  c,
  [509, 21],
  177,
  223,
  398,
  47,
  c,
  [54, 4],
  400,
  c,
  [598, 14],
  401,
  c,
  [45, 21],
  231,
  241,
  404,
  405,
  c,
  [23, 19]
]),
  mode: u([
  2,
  1,
  1,
  s,
  [2, 4],
  1,
  2,
  c,
  [7, 4],
  s,
  [1, 3],
  s,
  [2, 7],
  c,
  [8, 3],
  c,
  [12, 10],
  c,
  [23, 8],
  c,
  [37, 3],
  c,
  [10, 8],
  s,
  [1, 12],
  c,
  [17, 11],
  c,
  [26, 15],
  c,
  [34, 9],
  c,
  [4, 7],
  c,
  [74, 9],
  c,
  [13, 6],
  c,
  [11, 11],
  c,
  [61, 7],
  s,
  [2, 15],
  c,
  [73, 18],
  c,
  [133, 6],
  c,
  [173, 7],
  c,
  [168, 6],
  c,
  [9, 10],
  c,
  [50, 9],
  c,
  [61, 21],
  c,
  [20, 15],
  c,
  [170, 22],
  c,
  [190, 24],
  s,
  [1, 46],
  c,
  [163, 8],
  c,
  [233, 23],
  c,
  [19, 10],
  c,
  [348, 7],
  c,
  [112, 23],
  c,
  [121, 48],
  c,
  [320, 9],
  c,
  [193, 21],
  c,
  [102, 16],
  c,
  [124, 8],
  c,
  [413, 10],
  c,
  [12, 11],
  c,
  [11, 6],
  c,
  [33, 11],
  c,
  [406, 18],
  s,
  [2, 18],
  c,
  [217, 16],
  c,
  [471, 24],
  c,
  [52, 13],
  c,
  [7, 11],
  c,
  [40, 21],
  c,
  [231, 27],
  c,
  [85, 26],
  c,
  [431, 49],
  c,
  [366, 19],
  c,
  [268, 15],
  c,
  [283, 18],
  c,
  [92, 38],
  c,
  [341, 20],
  c,
  [203, 12],
  c,
  [141, 23],
  c,
  [900, 15],
  c,
  [300, 12],
  c,
  [371, 34],
  s,
  [1, 50],
  c,
  [164, 14],
  c,
  [447, 13],
  c,
  [418, 10],
  c,
  [673, 19],
  c,
  [699, 26],
  c,
  [175, 13],
  c,
  [319, 18]
]),
  goto: u([
  16,
  6,
  7,
  s,
  [16, 4],
  9,
  43,
  11,
  s,
  [43, 3],
  13,
  13,
  19,
  s,
  [11, 6],
  97,
  21,
  97,
  97,
  13,
  25,
  4,
  s,
  [15, 6],
  13,
  27,
  28,
  c,
  [36, 5],
  16,
  32,
  102,
  43,
  42,
  13,
  s,
  [42, 5],
  13,
  49,
  13,
  61,
  69,
  63,
  65,
  57,
  58,
  70,
  66,
  13,
  c,
  [57, 4],
  43,
  9,
  74,
  s,
  [9, 4],
  80,
  109,
  109,
  13,
  13,
  9,
  84,
  74,
  97,
  110,
  105,
  57,
  58,
  111,
  95,
  s,
  [106, 4, 1],
  96,
  13,
  112,
  74,
  9,
  20,
  116,
  123,
  124,
  20,
  125,
  s,
  [117, 6, 1],
  s,
  [22, 6],
  s,
  [127, 5, 1],
  s,
  [22, 6],
  c,
  [73, 9],
  28,
  28,
  133,
  s,
  [28, 15],
  c,
  [27, 9],
  c,
  [9, 4],
  c,
  [7, 3],
  c,
  [150, 3],
  97,
  32,
  101,
  43,
  42,
  101,
  c,
  [167, 4],
  141,
  142,
  s,
  [11, 3],
  c,
  [9, 13],
  s,
  [11, 3],
  155,
  43,
  158,
  13,
  80,
  159,
  132,
  s,
  [96, 4],
  13,
  c,
  [134, 13],
  13,
  9,
  47,
  40,
  47,
  47,
  c,
  [12, 4],
  13,
  13,
  169,
  110,
  111,
  13,
  172,
  77,
  176,
  13,
  178,
  179,
  c,
  [97, 13],
  c,
  [9, 18],
  c,
  [7, 3],
  184,
  43,
  42,
  102,
  186,
  9,
  188,
  74,
  s,
  [13, 3],
  193,
  194,
  74,
  c,
  [82, 5],
  c,
  [89, 7],
  13,
  201,
  9,
  203,
  13,
  208,
  c,
  [236, 7],
  c,
  [109, 14],
  21,
  123,
  124,
  21,
  125,
  s,
  [23, 6],
  c,
  [233, 5],
  s,
  [23, 6],
  215,
  c,
  [157, 4],
  13,
  218,
  74,
  80,
  159,
  13,
  220,
  74,
  67,
  40,
  s,
  [67, 4],
  c,
  [133, 3],
  224,
  225,
  90,
  89,
  c,
  [61, 13],
  32,
  154,
  255,
  215,
  256,
  250,
  251,
  248,
  249,
  254,
  154,
  13,
  13,
  260,
  c,
  [95, 7],
  262,
  c,
  [7, 6],
  13,
  270,
  9,
  272,
  13,
  288,
  69,
  289,
  c,
  [163, 4],
  291,
  66,
  c,
  [10, 11],
  13,
  s,
  [298, 4, -1],
  170,
  300,
  170,
  180,
  170,
  180,
  170,
  180,
  180,
  32,
  c,
  [25, 10],
  32,
  c,
  [77, 3],
  154,
  c,
  [78, 7],
  c,
  [103, 13],
  76,
  76,
  9,
  307,
  74,
  309,
  87,
  87,
  c,
  [111, 5],
  c,
  [34, 8],
  c,
  [12, 9],
  154,
  c,
  [13, 3],
  313,
  74,
  c,
  [85, 3],
  204,
  204,
  315,
  206,
  c,
  [446, 3],
  s,
  [206, 12],
  c,
  [457, 7],
  206,
  s,
  [208, 17],
  c,
  [236, 5],
  s,
  [208, 7],
  c,
  [130, 10],
  214,
  214,
  320,
  s,
  [214, 27],
  298,
  s,
  [216, 6],
  297,
  s,
  [216, 4],
  296,
  s,
  [216, 20],
  c,
  [238, 14],
  c,
  [8, 4],
  c,
  [231, 3],
  s,
  [170, 31],
  c,
  [52, 8],
  325,
  66,
  13,
  328,
  329,
  c,
  [303, 21],
  c,
  [11, 10],
  338,
  339,
  9,
  75,
  c,
  [280, 5],
  75,
  13,
  341,
  c,
  [357, 6],
  c,
  [6, 6],
  c,
  [280, 10],
  c,
  [268, 4],
  c,
  [15, 15],
  c,
  [84, 20],
  c,
  [169, 18],
  353,
  354,
  74,
  356,
  233,
  233,
  c,
  [58, 24],
  361,
  74,
  363,
  74,
  184,
  365,
  184,
  c,
  [110, 6],
  c,
  [23, 10],
  c,
  [531, 3],
  c,
  [375, 3],
  203,
  203,
  139,
  139,
  372,
  139,
  207,
  123,
  124,
  s,
  [207, 12],
  125,
  207,
  s,
  [209, 17],
  c,
  [371, 5],
  s,
  [209, 7],
  c,
  [139, 20],
  376,
  377,
  c,
  [171, 30],
  381,
  382,
  384,
  74,
  385,
  9,
  387,
  c,
  [164, 14],
  356,
  232,
  232,
  c,
  [34, 10],
  185,
  392,
  185,
  s,
  [252, 5],
  393,
  252,
  252,
  c,
  [171, 5],
  396,
  c,
  [673, 13],
  c,
  [174, 3],
  399,
  c,
  [621, 11],
  c,
  [26, 11],
  196,
  196,
  402,
  s,
  [196, 10],
  403,
  c,
  [97, 14],
  406,
  407,
  408
])
}),
defaultActions: bda({
  idx: u([
  2,
  3,
  9,
  13,
  15,
  23,
  26,
  28,
  31,
  32,
  33,
  35,
  36,
  37,
  45,
  47,
  48,
  54,
  56,
  57,
  s,
  [58, 4, 2],
  s,
  [65, 6, 1],
  72,
  74,
  79,
  82,
  s,
  [88, 7, 1],
  s,
  [99, 5, 1],
  105,
  s,
  [110, 4, 1],
  s,
  [116, 10, 1],
  s,
  [127, 6, 1],
  135,
  s,
  [137, 11, 1],
  s,
  [149, 5, 1],
  156,
  157,
  s,
  [161, 7, 1],
  170,
  171,
  175,
  182,
  183,
  184,
  186,
  191,
  192,
  194,
  195,
  197,
  198,
  199,
  201,
  203,
  206,
  s,
  [209, 6, 1],
  216,
  217,
  219,
  223,
  226,
  228,
  229,
  230,
  s,
  [232, 16, 1],
  257,
  258,
  259,
  261,
  s,
  [262, 4, 2],
  269,
  270,
  275,
  277,
  280,
  282,
  285,
  286,
  287,
  294,
  296,
  s,
  [299, 4, 2],
  310,
  311,
  312,
  319,
  322,
  323,
  325,
  327,
  330,
  332,
  333,
  334,
  336,
  340,
  s,
  [342, 4, 1],
  347,
  s,
  [351, 4, 1],
  357,
  358,
  360,
  361,
  363,
  367,
  369,
  374,
  s,
  [376, 4, 1],
  381,
  385,
  387,
  388,
  s,
  [389, 5, 2],
  400,
  s,
  [402, 5, 1],
  408
]),
  goto: u([
  1,
  2,
  252,
  251,
  18,
  45,
  17,
  3,
  13,
  14,
  9,
  104,
  105,
  106,
  99,
  7,
  44,
  24,
  27,
  37,
  38,
  30,
  32,
  s,
  [222, 7, 1],
  10,
  253,
  110,
  124,
  s,
  [48, 6, 1],
  56,
  s,
  [58, 4, 1],
  34,
  36,
  39,
  41,
  5,
  19,
  s,
  [244, 7, 1],
  s,
  [236, 8, 1],
  26,
  33,
  12,
  103,
  107,
  108,
  111,
  112,
  125,
  126,
  128,
  133,
  127,
  s,
  [115, 5, 1],
  122,
  123,
  98,
  100,
  6,
  46,
  57,
  94,
  95,
  35,
  40,
  73,
  25,
  29,
  31,
  113,
  129,
  131,
  54,
  55,
  64,
  65,
  66,
  69,
  71,
  79,
  91,
  92,
  93,
  68,
  8,
  134,
  114,
  120,
  130,
  72,
  74,
  137,
  138,
  139,
  141,
  143,
  s,
  [155, 4, 1],
  s,
  [144, 10, 1],
  171,
  172,
  121,
  63,
  70,
  81,
  86,
  78,
  90,
  135,
  170,
  205,
  210,
  213,
  217,
  218,
  219,
  198,
  173,
  179,
  187,
  192,
  62,
  136,
  140,
  142,
  212,
  221,
  229,
  231,
  235,
  169,
  176,
  177,
  178,
  183,
  80,
  85,
  88,
  164,
  165,
  166,
  211,
  215,
  220,
  230,
  160,
  161,
  199,
  174,
  181,
  194,
  159,
  234,
  200,
  201,
  175,
  182,
  188,
  82,
  84,
  167,
  168,
  202,
  189,
  193,
  195,
  186,
  197,
  83,
  162,
  163,
  190,
  191
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 409 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;

      /*
       * scan.l
       *
       * lex input file for pascal scanner
       *
       * extensions: to ways to spell "external" and "->" ok for "^".
       */

      // #include <stdio.h>
      // #include "y.tab.h"
      // int line_no = 1;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 63:
        /*! Conditions:: INITIAL */
        /*! Rule::       -> */

        break;

      case 65:
        /*! Conditions:: INITIAL */
        /*! Rule::       \(\* */

        break;

      case 66:
        /*! Conditions:: INITIAL */
        /*! Rule::       \{ */
        comment();

        break;

      case 67:
        break;

      case 68:
        /*! Conditions:: INITIAL */
        /*! Rule::       \n */
        {}

        break;

      case 69:
        /*! Conditions:: INITIAL */
        /*! Rule::       . */
        // fprintf (stderr,
        // "'%c' (0%o): illegal charcter at line %d\n",
        //  yy_.yytext[0], yy_.yytext[0], line_no); 
        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       {A}{N}{D} */
      0: 58,

      /*! Conditions:: INITIAL */
      /*! Rule::       {A}{R}{R}{A}{Y} */
      1: 20,

      /*! Conditions:: INITIAL */
      /*! Rule::       {C}{A}{S}{E} */
      2: 27,

      /*! Conditions:: INITIAL */
      /*! Rule::       {C}{O}{N}{S}{T} */
      3: 9,

      /*! Conditions:: INITIAL */
      /*! Rule::       {D}{I}{V} */
      4: 56,

      /*! Conditions:: INITIAL */
      /*! Rule::       {D}{O} */
      5: 40,

      /*! Conditions:: INITIAL */
      /*! Rule::       {D}{O}{W}{N}{T}{O} */
      6: 51,

      /*! Conditions:: INITIAL */
      /*! Rule::       {E}{L}{S}{E} */
      7: 46,

      /*! Conditions:: INITIAL */
      /*! Rule::       {E}{N}{D} */
      8: 25,

      /*! Conditions:: INITIAL */
      /*! Rule::       {E}{X}{T}{E}{R}{N}|{E}{X}{T}{E}{R}{N}{A}{L} */
      9: 33,

      /*! Conditions:: INITIAL */
      /*! Rule::       {F}{O}{R} */
      10: 41,

      /*! Conditions:: INITIAL */
      /*! Rule::       {F}{O}{R}{W}{A}{R}{D} */
      11: 32,

      /*! Conditions:: INITIAL */
      /*! Rule::       {F}{U}{N}{C}{T}{I}{O}{N} */
      12: 35,

      /*! Conditions:: INITIAL */
      /*! Rule::       {G}{O}{T}{O} */
      13: 47,

      /*! Conditions:: INITIAL */
      /*! Rule::       {I}{F} */
      14: 44,

      /*! Conditions:: INITIAL */
      /*! Rule::       {I}{N} */
      15: 64,

      /*! Conditions:: INITIAL */
      /*! Rule::       {L}{A}{B}{E}{L} */
      16: 7,

      /*! Conditions:: INITIAL */
      /*! Rule::       {M}{O}{D} */
      17: 57,

      /*! Conditions:: INITIAL */
      /*! Rule::       {N}{I}{L} */
      18: 52,

      /*! Conditions:: INITIAL */
      /*! Rule::       {N}{O}{T} */
      19: 12,

      /*! Conditions:: INITIAL */
      /*! Rule::       {O}{F} */
      20: 23,

      /*! Conditions:: INITIAL */
      /*! Rule::       {O}{R} */
      21: 53,

      /*! Conditions:: INITIAL */
      /*! Rule::       {O}{T}{H}{E}{R}{W}{I}{S}{E} */
      22: 49,

      /*! Conditions:: INITIAL */
      /*! Rule::       {P}{A}{C}{K}{E}{D} */
      23: 19,

      /*! Conditions:: INITIAL */
      /*! Rule::       {B}{E}{G}{I}{N} */
      24: 36,

      /*! Conditions:: INITIAL */
      /*! Rule::       {F}{I}{L}{E} */
      25: 29,

      /*! Conditions:: INITIAL */
      /*! Rule::       {P}{R}{O}{C}{E}{D}{U}{R}{E} */
      26: 34,

      /*! Conditions:: INITIAL */
      /*! Rule::       {P}{R}{O}{G}{R}{A}{M} */
      27: 4,

      /*! Conditions:: INITIAL */
      /*! Rule::       {R}{E}{C}{O}{R}{D} */
      28: 24,

      /*! Conditions:: INITIAL */
      /*! Rule::       {R}{E}{P}{E}{A}{T} */
      29: 37,

      /*! Conditions:: INITIAL */
      /*! Rule::       {S}{E}{T} */
      30: 28,

      /*! Conditions:: INITIAL */
      /*! Rule::       {T}{H}{E}{N} */
      31: 45,

      /*! Conditions:: INITIAL */
      /*! Rule::       {T}{O} */
      32: 50,

      /*! Conditions:: INITIAL */
      /*! Rule::       {T}{Y}{P}{E} */
      33: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       {U}{N}{T}{I}{L} */
      34: 38,

      /*! Conditions:: INITIAL */
      /*! Rule::       {V}{A}{R} */
      35: 31,

      /*! Conditions:: INITIAL */
      /*! Rule::       {W}{H}{I}{L}{E} */
      36: 39,

      /*! Conditions:: INITIAL */
      /*! Rule::       {W}{I}{T}{H} */
      37: 43,

      /*! Conditions:: INITIAL */
      /*! Rule::       [a-zA-Z]([a-zA-Z0-9])+ */
      38: 65,

      /*! Conditions:: INITIAL */
      /*! Rule::       := */
      39: 42,

      /*! Conditions:: INITIAL */
      /*! Rule::       \(\{NQUOTE\}\|\)\+ */
      40: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       : */
      41: 26,

      /*! Conditions:: INITIAL */
      /*! Rule::       , */
      42: 66,

      /*! Conditions:: INITIAL */
      /*! Rule::       [0-9]+ */
      43: 8,

      /*! Conditions:: INITIAL */
      /*! Rule::       \. */
      44: 3,

      /*! Conditions:: INITIAL */
      /*! Rule::       \.\. */
      45: 18,

      /*! Conditions:: INITIAL */
      /*! Rule::       = */
      46: 10,

      /*! Conditions:: INITIAL */
      /*! Rule::       >= */
      47: 63,

      /*! Conditions:: INITIAL */
      /*! Rule::       > */
      48: 61,

      /*! Conditions:: INITIAL */
      /*! Rule::       \[ */
      49: 21,

      /*! Conditions:: INITIAL */
      /*! Rule::       <= */
      50: 62,

      /*! Conditions:: INITIAL */
      /*! Rule::       \( */
      51: 5,

      /*! Conditions:: INITIAL */
      /*! Rule::       < */
      52: 60,

      /*! Conditions:: INITIAL */
      /*! Rule::       - */
      53: 15,

      /*! Conditions:: INITIAL */
      /*! Rule::       <> */
      54: 59,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+ */
      55: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       \] */
      56: 22,

      /*! Conditions:: INITIAL */
      /*! Rule::       [0-9]+\.[0-9]+ */
      57: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       \) */
      58: 6,

      /*! Conditions:: INITIAL */
      /*! Rule::       ; */
      59: 48,

      /*! Conditions:: INITIAL */
      /*! Rule::       \/ */
      60: 55,

      /*! Conditions:: INITIAL */
      /*! Rule::       \* */
      61: 54,

      /*! Conditions:: INITIAL */
      /*! Rule::       \*\* */
      62: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       \^ */
      64: 30
    },

    rules: [
      /*  0: */  /^(?:([Aa])([Nn])([Dd]))/,
      /*  1: */  /^(?:([Aa])([Rr])([Rr])([Aa])([Yy]))/,
      /*  2: */  /^(?:([Cc])([Aa])([Ss])([Ee]))/,
      /*  3: */  /^(?:([Cc])([Oo])([Nn])([Ss])([Tt]))/,
      /*  4: */  /^(?:([Dd])([Ii])([Vv]))/,
      /*  5: */  /^(?:([Dd])([Oo]))/,
      /*  6: */  /^(?:([Dd])([Oo])([Ww])([Nn])([Tt])([Oo]))/,
      /*  7: */  /^(?:([Ee])([Ll])([Ss])([Ee]))/,
      /*  8: */  /^(?:([Ee])([Nn])([Dd]))/,
      /*  9: */  /^(?:([Ee])([Xx])([Tt])([Ee])([Rr])([Nn])|([Ee])([Xx])([Tt])([Ee])([Rr])([Nn])([Aa])([Ll]))/,
      /* 10: */  /^(?:([Ff])([Oo])([Rr]))/,
      /* 11: */  /^(?:([Ff])([Oo])([Rr])([Ww])([Aa])([Rr])([Dd]))/,
      /* 12: */  /^(?:([Ff])([Uu])([Nn])([Cc])([Tt])([Ii])([Oo])([Nn]))/,
      /* 13: */  /^(?:([Gg])([Oo])([Tt])([Oo]))/,
      /* 14: */  /^(?:([Ii])([Ff]))/,
      /* 15: */  /^(?:([Ii])([Nn]))/,
      /* 16: */  /^(?:([Ll])([Aa])([Bb])([Ee])([Ll]))/,
      /* 17: */  /^(?:([Mm])([Oo])([Dd]))/,
      /* 18: */  /^(?:([Nn])([Ii])([Ll]))/,
      /* 19: */  /^(?:([Nn])([Oo])([Tt]))/,
      /* 20: */  /^(?:([Oo])([Ff]))/,
      /* 21: */  /^(?:([Oo])([Rr]))/,
      /* 22: */  /^(?:([Oo])([Tt])([Hh])([Ee])([Rr])([Ww])([Ii])([Ss])([Ee]))/,
      /* 23: */  /^(?:([Pp])([Aa])([Cc])([Kk])([Ee])([Dd]))/,
      /* 24: */  /^(?:([Bb])([Ee])([Gg])([Ii])([Nn]))/,
      /* 25: */  /^(?:([Ff])([Ii])([Ll])([Ee]))/,
      /* 26: */  /^(?:([Pp])([Rr])([Oo])([Cc])([Ee])([Dd])([Uu])([Rr])([Ee]))/,
      /* 27: */  /^(?:([Pp])([Rr])([Oo])([Gg])([Rr])([Aa])([Mm]))/,
      /* 28: */  /^(?:([Rr])([Ee])([Cc])([Oo])([Rr])([Dd]))/,
      /* 29: */  /^(?:([Rr])([Ee])([Pp])([Ee])([Aa])([Tt]))/,
      /* 30: */  /^(?:([Ss])([Ee])([Tt]))/,
      /* 31: */  /^(?:([Tt])([Hh])([Ee])([Nn]))/,
      /* 32: */  /^(?:([Tt])([Oo]))/,
      /* 33: */  /^(?:([Tt])([Yy])([Pp])([Ee]))/,
      /* 34: */  /^(?:([Uu])([Nn])([Tt])([Ii])([Ll]))/,
      /* 35: */  /^(?:([Vv])([Aa])([Rr]))/,
      /* 36: */  /^(?:([Ww])([Hh])([Ii])([Ll])([Ee]))/,
      /* 37: */  /^(?:([Ww])([Ii])([Tt])([Hh]))/,
      /* 38: */  /^(?:[A-Za-z]([^\W_])+)/,
      /* 39: */  /^(?::=)/,
      /* 40: */  /^(?:\(\{NQUOTE\}\|\)\+)/,
      /* 41: */  /^(?::)/,
      /* 42: */  /^(?:,)/,
      /* 43: */  /^(?:\d+)/,
      /* 44: */  /^(?:\.)/,
      /* 45: */  /^(?:\.\.)/,
      /* 46: */  /^(?:=)/,
      /* 47: */  /^(?:>=)/,
      /* 48: */  /^(?:>)/,
      /* 49: */  /^(?:\[)/,
      /* 50: */  /^(?:<=)/,
      /* 51: */  /^(?:\()/,
      /* 52: */  /^(?:<)/,
      /* 53: */  /^(?:-)/,
      /* 54: */  /^(?:<>)/,
      /* 55: */  /^(?:\+)/,
      /* 56: */  /^(?:\])/,
      /* 57: */  /^(?:\d+\.\d+)/,
      /* 58: */  /^(?:\))/,
      /* 59: */  /^(?:;)/,
      /* 60: */  /^(?:\/)/,
      /* 61: */  /^(?:\*)/,
      /* 62: */  /^(?:\*\*)/,
      /* 63: */  /^(?:->)/,
      /* 64: */  /^(?:\^)/,
      /* 65: */  /^(?:\(\*)/,
      /* 66: */  /^(?:\{)/,
      /* 67: */  /^(?:[ \t\f])/,
      /* 68: */  /^(?:\n)/,
      /* 69: */  /^(?:.)/
    ],

    conditions: {
      'INITIAL': {
        rules: [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69
        ],

        inclusive: true
      }
    }
  };

  // comment ()
  // {
  //  register int c;
  //      while ((c = input()))
  //      {
  //       if (c == '}')
  //        break;
  //       else if (c == '*')
  //       {
  //        if ((c = input()) == ')')
  //         break;
  //        else
  //         unput (c);
  //       }
  //       else if (c == '\n')
  //        line_no++;
  //       else if (c == 0)
  //        commenteof();
  //      }
  // }

  // commenteof()
  // {
  //  fprintf (stderr, "unexpected EOF inside comment at line %d\n",
  //   line_no);
  //  exit (1);
  // }

  // yywrap ()
  // {
  //  return (1);
  // };

  return lexer;
}();
parser.lexer = lexer;

/*
 * grammar.y
 *
 * Pascal grammar in Yacc format, based originally on BNF given
 * in "Standard Pascal -- User Reference Manual", by Doug Cooper.
 * This in turn is the BNF given by the ANSI and ISO Pascal standards,
 * and so, is PUBLIC DOMAIN. The grammar is for ISO Level 0 Pascal.
 * The grammar has been massaged somewhat to make it LALR, and added
 * the following extensions.
 *
 * constant expressions
 * otherwise statement in a case
 * productions to correctly match else's with if's
 * beginnings of a separate compilation facility
 */

const R = require ('@parsetree/nodes').R;
const TR = require ('@parsetree/nodes').TR;
const RR = require ('@parsetree/nodes').RR;
const RTR = require ('@parsetree/nodes').RTR;
const T = require ('@parsetree/nodes').T;
const TT = require ('@parsetree/nodes').TT;

// const SF = require ('@parsetree/context').SF;
// const UF = require ('@parsetree/context').UF;

// const SymbolType = require ('@ast/symbol').SymbolType;
// const SYM = require ('@ast/symbol').SYM;

// const IS = require ('@parsetree/context').IS;

// // TODO should be moved to the parser wrapper
// const RF = require ('@parsetree/context').RF;
// const RESET = require ('@ast/symbol').RESET;

// RF ();
// RESET ();

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = pascal;
  exports.Parser = pascal.Parser;
  exports.parse = function () {
    return pascal.parse.apply(pascal, arguments);
  };
  
}
